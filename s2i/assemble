#!/usr/bin/env bash

set -e

source /usr/libexec/s2i/env

# Restore artifacts from previous build (if they exist)
if [ "$(ls /tmp/artifacts/ 2>/dev/null)" ]; then
  echo "---> Restoring build artifacts..."
  mv /tmp/artifacts/node_modules ./
fi

# Copy source code to user directory
echo "---> Installing application source"
cp -Rfp /tmp/src/. ./

# Tweak proxy settings if necessary
if [ ! -z $HTTP_PROXY ]; then
	echo "---> Setting npm http proxy to $HTTP_PROXY"
	npm config set proxy $HTTP_PROXY
fi

if [ ! -z $http_proxy ]; then
	echo "---> Setting npm http proxy to $http_proxy"
	npm config set proxy $http_proxy
fi

if [ ! -z $HTTPS_PROXY ]; then
	echo "---> Setting npm https proxy to $HTTPS_PROXY"
	npm config set https-proxy $HTTPS_PROXY
fi

if [ ! -z $https_proxy ]; then
	echo "---> Setting npm https proxy to $https_proxy"
	npm config set https-proxy $https_proxy
fi

# Change the npm registry mirror if provided
if [ ! -z "$NPM_MIRROR" ]; then
	echo "---> Setting the npm package mirror to $NPM_MIRROR"
	npm config set registry $NPM_MIRROR
fi

echo "---> Installing all dependencies"
NODE_ENV=development npm install
echo "---> Building application"
npm run build

# This will cause the image to fail if you attempt to run it directly
# Set DEV_MODE=true if you want to test using this image
# Otherwise use a chained s2i build
if [ ! "$DEV_MODE" ]; then
  echo "---> Pruning the development dependencies"
  npm prune
fi

echo "---> Cleaning up npm cache"
rm -rf .npm

if [ -f "nginx.conf" ]; then
  echo "---> Copy nginx configuration into output directory"
  mv nginx.conf dist/
fi

echo "---> Fix permissions on app-root"
chown -R 1001:0 $APP_ROOT
